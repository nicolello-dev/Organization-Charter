import Head from "next/head";

import { createContext, useContext, useEffect, useState } from "react";

import Filter from "@/components/filter"
import ViewData from "@/components/viewData";

import type { Filter as Filters } from "@/types/common/filters";
import { EmployeeWithTeam } from "@/types/common/employees";
import { groupBy } from "@/lib/groupBy";

export type filterContextType = {
    filters: Filters,
    setFilters: React.Dispatch<React.SetStateAction<Filters>> | undefined
}

const initialFilter: Filters = {
    name: "",
    functionalLead: "",
    teamName: "",
    teamLead: "",
    domain: "",
    domainLead: "",
    tribe: "",
    tribeLead: "",
    tribeArea: "",
    tribeAreaLead: ""
}

export const filterContext = createContext<filterContextType>({
  filters: initialFilter,
  setFilters: undefined
});

export default function Home() {

  const [filters, setFilters] = useState<Filters>(initialFilter);
  const [tribes, setTribes] = useState<Record<string, EmployeeWithTeam[]>>({} as Record<string, EmployeeWithTeam[]>);
  const [isLoading, setLoading] = useState<boolean>(false);

  function fetchNewData(filtersCtx: filterContextType) {
      fetch(`/api/getFilteredEmployees?name=${filtersCtx.filters.name}&functionalLead=${filtersCtx.filters.functionalLead}&teamName=${filtersCtx.filters.teamName}&teamLead=${filtersCtx.filters.teamLead}&domain=${filtersCtx.filters.domain}&domainLead=${filtersCtx.filters.domainLead}&tribeArea=${filtersCtx.filters.tribeArea}&tribeAreaLead=${filtersCtx.filters.tribeAreaLead}&tribe=${filtersCtx.filters.tribe}&tribeLead=${filtersCtx.filters.tribeLead}`)
          .then(r => r.json())
          .then((r: EmployeeWithTeam[]) => {
              const t = groupBy(r, (e: EmployeeWithTeam) => e.team.tribe || "");
              setTribes(t);
              setLoading(false);
          })
  }

  return (
    <>
      <Head>
        <title>Organization Charter - Improved</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <filterContext.Provider value={{
          filters: filters,
          setFilters: setFilters
        }}>
          <Filter handleReloadFilters={fetchNewData}/>
          <ViewData tribes={tribes} isLoading={isLoading} fetchNewData={fetchNewData}/>
        </filterContext.Provider>
      </main>
    </>
  );
}